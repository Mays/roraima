@@ -2,10 +2,13 @@
 /**
  * confinins actions.
  *
- * @package    siga
+ * @package    Roraima
  * @subpackage confinins
- * @author     Your name here
- * @version    SVN: $Id: actions.class.php 2288 2006-10-02 15:22:13Z fabien $
+ * @author     $Author$ <desarrollo@cidesa.com.ve>
+ * @version SVN: $Id$
+ * 
+ * @copyright  Copyright 2007, Cide S.A.
+ * @license    http://opensource.org/licenses/gpl-2.0.php GPLv2
  */
 class confininsActions extends autoconfininsActions
 {
@@ -29,12 +32,29 @@
   }
 
 
+  /**
+   * Función para colocar el codigo necesario en  
+   * el proceso de edición.
+   * Aquí se pueden buscar datos adicionales que necesite la vista
+   * Esta función es parte de la acción executeEdit, que maneja tanto
+   * el create como el edit del formulario.
+   * Generalmente aqui se debe y puede colocar los llamados a los configGrid
+   * Para generar la información de configuración de los grids.
+   *
+   */
   public function editing()
   {
 	$this->configGrid('','');
 
   }
 
+  /**
+   * Esta función permite definir la configuración del grid de datos
+   * que contiene el formulario. Esta función debe ser llamada
+   * en las acciones, create, edit y handleError para recargar en todo momento
+   * los datos del grid.
+   *
+   */
   public function configGrid($fecini = date,$feccie = date )
   {
   	$this->params = array();
@@ -50,6 +70,13 @@
 
 
 
+  /**
+   * Esta función permite definir la configuración del grid de datos
+   * que contiene el formulario. Esta función debe ser llamada
+   * en las acciones, create, edit y handleError para recargar en todo momento
+   * los datos del grid.
+   *
+   */
   public function configGrid_distribuir($fecini = date,$feccie = date ){
 
   	$reg=array();
@@ -61,7 +88,13 @@
     $this->params['grid'] = $this->obj;
  }
 
- public function executeAjax(){
+ /**
+   * Función para procesar _todas_ las funciones Ajax del formulario
+   * Cada función esta identificada con el valor de la vista "ajax"
+   * el cual traerá el indice de lo que se quiere procesar.
+   *
+   */
+  public function executeAjax(){
 
     $codigo = $this->getRequestParameter('codigo','');
     $ajax = $this->getRequestParameter('ajax','');
@@ -95,6 +128,15 @@
   }
 
 
+  
+  
+  
+  /**
+   *
+   * Función que se ejecuta luego los validadores del negocio (validators)   * Para realizar validaciones específicas del negocio del formulario
+   * Para mayor información vease http://www.symfony-project.org/book/1_0/06-Inside-the-Controller-Layer#chapter_06_validation_and_error_handling_methods
+   *
+   */
   public function validateEdit()
   {
     $this->coderr =-1;
@@ -146,14 +188,38 @@
 
   }
 
+  /**
+   * Función para colocar el codigo necesario para 
+   * el proceso de guardar.
+   * Esta función debe retornar un valor igual a -1 si no hubo 
+   * Inconvenientes al guardar, y != de -1 si existe algún error.
+   * Si es diferente de -1 el valor devuelto debe ser un código de error
+   * Válido que exista en el archivo config/errores.yml
+   *
+   */
   public function saving($clasemodelo){
     return Contabilidad::salvarConfinins($clasemodelo);
   }
 
+  /**
+   * Función para colocar el codigo necesario para 
+   * el proceso de eliminar.
+   * Esta función debe retornar un valor igual a -1 si no hubo 
+   * Inconvenientes al guardar, y != de -1 si existe algún error.
+   * Si es diferente de -1 el valor devuelto debe ser un código de error
+   * Válido que exista en el archivo config/errores.yml
+   *
+   */
   public function deleting($clasemodelo){
     return -1;
   }
 
+  /**
+   * Función para manejar la captura de errores del negocio, tanto que se
+   * produzcan por algún validator y por un valor false retornado por el validateEdit
+   * Para mayor información vease http://www.symfony-project.org/book/1_0/06-Inside-the-Controller-Layer#chapter_06_validation_and_error_handling_methods
+   *
+   */
   public function handleErrorEdit()  {
     $this->params=array();
     $this->preExecute();
