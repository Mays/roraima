<?php
// auto-generated by sfPropelAdmin
// date: 2007/03/13 10:50:12
?>
<?php

/**
 * autoAlmtiprecpro actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoAlmtiprecpro
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoAlmtiprecproActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('almtiprecpro', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/catiprec/filters');

    // pager
    $this->pager = new sfPropelPager('Catiprec', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('almtiprecpro', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('almtiprecpro', 'edit');
  }

  public function executeEdit()
  {
    $this->catiprec = $this->getCatiprecOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateCatiprecFromRequest();

      $this->saveCatiprec($this->catiprec);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('almtiprecpro/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('almtiprecpro/list');
      }
      else
      {
        return $this->redirect('almtiprecpro/edit?id='.$this->catiprec->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->catiprec = CatiprecPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->catiprec);

    try
    {
      $this->deleteCatiprec($this->catiprec);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Catiprec. Make sure it does not have any associated items.');
      return $this->forward('almtiprecpro', 'list');
    }

    return $this->redirect('almtiprecpro/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->catiprec = $this->getCatiprecOrCreate();
    $this->updateCatiprecFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveCatiprec($catiprec)
  {
    $catiprec->save();

  }

  protected function deleteCatiprec($catiprec)
  {
    $catiprec->delete();
  }

  protected function updateCatiprecFromRequest()
  {
    $catiprec = $this->getRequestParameter('catiprec');

    if (isset($catiprec['codtiprec']))
    {
      $this->catiprec->setCodtiprec($catiprec['codtiprec']);
    }
    if (isset($catiprec['destiprec']))
    {
      $this->catiprec->setDestiprec($catiprec['destiprec']);
    }
  }

  protected function getCatiprecOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $catiprec = new Catiprec();
    }
    else
    {
      $catiprec = CatiprecPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($catiprec);
    }

    return $catiprec;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/catiprec/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/catiprec/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/catiprec/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/catiprec/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/catiprec/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codtiprec_is_empty']))
    {
      $criterion = $c->getNewCriterion(CatiprecPeer::CODTIPREC, '');
      $criterion->addOr($c->getNewCriterion(CatiprecPeer::CODTIPREC, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codtiprec']) && $this->filters['codtiprec'] !== '')
    {
      $c->add(CatiprecPeer::CODTIPREC, strtr($this->filters['codtiprec'], '*', '%'), Criteria::LIKE);
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/catiprec/sort'))
    {
      $sort_column = CatiprecPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/catiprec/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'catiprec{codtiprec}' => 'Codtiprec:',
      'catiprec{destiprec}' => 'Destiprec:',
      'catiprec{id}' => 'Id:',
    );
  }
}
